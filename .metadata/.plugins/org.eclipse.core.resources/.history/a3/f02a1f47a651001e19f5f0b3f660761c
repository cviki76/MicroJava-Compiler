

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, CONST, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, RBRACKET, LBRACKET, IS, RETURN, PLUS, MINUS, COMMA, PRINT, VOID, DOT;
terminal NEW, ARROW, PERCENT, LT, LTE, GRT, GRTE, IF, ELSE, CONTINUE, FOREACH, BREAK, AND, OR, WHILE, NOTEQUAL, EQUAL, READ, DIV, MUL, DECR, INCR;
terminal FINDANY, FINDANDREPLACE;
terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal DeclList, MethodDeclList, OneDecl, ConstDecl, IdentOptions, IdentList, VarDecl;
nonterminal ConstIdentList, ForEachBegin, WhileBegin, ForEachEnd, WhileEnd;
nonterminal FormParams, FormPar;
nonterminal Statements, Statement, WhileCondition;
nonterminal IfBegin, IfCondition, IfEnd, IfElseBegin, IfElseCondition, ElseBegin, IfElseEnd;
nonterminal Relop, Addop, Mulop;
nonterminal FindAnyBegin, FindAndReplaceBegin;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, ConstValue, ConstIdent;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr, ExprList, DesignatorAddOn;
nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorNew, CondFact, CondTerm, Condition, ActParsAddOn, ActPars, OptActPars, DesignatorAddOnList;
precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

Type ::= (Type) IDENT:typeName;

DeclList ::= (DeclarationList) DeclList OneDecl
			|
			(NoDeclarationList);
			
OneDecl ::= VarDecl
		|
		ConstDecl;

VarDecl ::= (VarDecl) Type IdentList SEMI;

IdentOptions ::= (IdentOptionsElem) IDENT:varName
				|
				(IdentOptionsArray) IDENT:varName LBRACKET RBRACKET
				|
				(IdentOptionsMatrix) IDENT:varName LBRACKET RBRACKET LBRACKET RBRACKET;
				

IdentList ::= (IdentListOneOrMore) IdentList COMMA IdentOptions
			|
			(OneIdent) IdentOptions;

ConstDecl ::= (ConstDecl) CONST Type ConstIdentList SEMI;

ConstIdentList ::= (ConstIdentMoreThanOne) ConstIdentList COMMA ConstIdent
				|
				(ConstIdentOne) ConstIdent;
				
ConstIdent ::= (ConstIdent) IDENT:constName IS ConstValue:constVal;

ConstValue ::= (ConstValueNumber) NUMBER:n
			  |
			  (ConstValueChar) CHAR:c
			  |
			  (ConstValueBool) BOOL:b;
	
MethodDeclList ::= (MethodDeclListMany) MethodDeclList MethodDecl
				|
				(MethodDeclListOne) MethodDecl;


MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormParams RPAREN DeclList LBRACE Statements RBRACE;

MethodTypeName ::= (MethodTypeNameType) Type IDENT:methodName
				|
				(MethodTypeNameVoid) VOID IDENT:methodName;
					
FormParams ::= (FormParamsMany) FormParams COMMA FormPar
			|
			(FormParamsOne) FormPar
			|
			(FormParamsNone);

FormPar ::= (FormParElem) Type IDENT:par
		|
		(FormParArray) Type IDENT:par LBRACKET RBRACKET
		|
		(FormParMatrix) IDENT:par LBRACKET RBRACKET LBRACKET RBRACKET;
		
Statements ::= (StatementsMany) Statements Statement
			|
			(StatementOne) Statement
			;

Statement ::= (StatementDesignator) DesignatorStatement SEMI
			|
			(StatementIf) IfBegin IfCondition RPAREN Statement IfEnd
			|
			(StatementElse) IfBegin IfCondition RPAREN Statement ElseBegin Statement IfElseEnd
			|			
			(StatementWhile) WhileBegin WhileCondition RPAREN Statement WhileEnd
			|
			(StatementBreak) BREAK SEMI
			|
			(StatementContinue) CONTINUE SEMI			
			|
			(StatementReturnNoExpr) RETURN SEMI
			|
			(StatementReturnExpr) RETURN Expr SEMI
			|
			(StatementRead) READ LPAREN Designator RPAREN SEMI
			|
			(StatementPrint) PRINT LPAREN Expr RPAREN SEMI
			|
			(StatementPrintWithConst) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			|
			(StatementStatement) LBRACE Statements RBRACE
			|
			(StatementForEach) ForEachBegin ARROW Statement RPAREN ForEachEnd SEMI;
			
WhileBegin ::= (WhileBegin) WHILE LPAREN;

WhileCondition ::= (WhileCondition) Condition;

WhileEnd ::= (WhileEnd);

ForEachBegin ::= (ForEachBegin) Designator DOT FOREACH LPAREN Designator;

ForEachEnd ::= (ForEachEnd);

IfBegin ::= (IfBegin) IF LPAREN;

IfCondition ::= (IfCondition) Condition;

IfEnd ::= (IfEnd);

IfElseBegin ::= (IfElseBegin) IF LPAREN;

IfElseCondition ::= (IfElseCondition) Condition;

ElseBegin ::= (ElseBegin) ELSE;

IfElseEnd ::= (IfElseEnd);

Condition ::= (ConditionMany) CondTerm OR Condition
			|
			(ConditionOne) CondTerm;

CondTerm ::= (CondTermMany) CondFact AND CondTerm
			|
			(CondTermOne) CondFact;

CondFact ::= (CondFactOne) Expr
		| 
		(CondFactTwo) Expr:e1 Relop Expr:e2;


DesignatorStatement ::= (DesignatorStatementIs) Designator IS Expr
					|
					(DesignatorStatementFindAny) Designator IS Designator FindAnyBegin LPAREN Expr RPAREN
					|
					(DesignatorStatementFindAndReplace) Designator IS Designator FindAndReplaceBegin LPAREN Expr COMMA Designator ARROW Expr RPAREN
					|
					(DesignatorStatementDecr) Designator DECR
					|
					(DesignatorStatementIncr) Designator INCR
					|
					(DesignatorStatementAct) Designator OptActPars;

Designator ::= (Designator) IDENT:name DesignatorAddOnList;

DesignatorAddOnList ::= (AddOns) DesignatorAddOnList DesignatorAddOn
					|
					(NoAddOns);

DesignatorAddOn ::= (DesignatorAddOn) LBRACKET Expr RBRACKET; 


FindAndReplaceBegin ::= (FindAndReplaceBegin) DOT FINDANDREPLACE;

FindAnyBegin ::= (FindAnyBegin) DOT FINDANY;

Expr ::= (ExprMinus) MINUS ExprList
		|
		(ExprNormal) ExprList;

ExprList ::= (ExprMany) ExprList Addop Term
			|
			(ExprOne) Term;		

Term ::= (TermMany) Term Mulop Factor
		|
		(TermOne) Factor;

Factor ::= (FactorNumber) NUMBER:n		
		|
		(FactorChar) CHAR:c
		|
		(FactorBool) BOOL:b
		|
		(FactorParen) LPAREN Expr RPAREN
		|
		(FactorDesActPar) Designator OptActPars
		|
		(FactorDesignator) Designator
		|
		(FactorNewExpr) NEW Type FactorNew;
		
FactorNew ::= (FactorNew) LBRACKET Expr RBRACKET;
			
OptActPars ::= (OptActPars) LPAREN ActPars RPAREN;
			
ActPars ::= (ActParsHas) Expr ActParsAddOn
			|
			(ActParsNone);

ActParsAddOn ::= (ActParsAddOnMany) ActParsAddOn COMMA Expr
			|
			(ActParsAddOnNone);

Relop ::= (RelopE) EQUAL
		|
		(RelopNE) NOTEQUAL
		|
		(RelopGRT) GRT
		|
		(RelopGRTE) GRTE
		|
		(RelopLT) LT
		|
		(RelopLTE) LTE;
		
				
Addop ::= (AddopP) PLUS
		|
		(AddopM) MINUS;

Mulop ::= (MulopM) MUL
		|
		(MulopD) DIV
		|
		(MulopP) PERCENT;
