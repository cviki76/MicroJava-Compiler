

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, CONST, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, RBRACKET, LBRACKET, IS, RETURN, PLUS, MINUS, COMMA, PRINT, VOID, DOT;
terminal NEW, ARROW, PERCENT, LT, LTE, GRT, GRTE, IF, ELSE, CONTINUE, FOREACH, BREAK, AND, OR, WHILE, NOTEQUAL, EQUAL, READ, DIV, MUL, DECR, INCR;
terminal FINDANY, FINDANDREPLACE, COUNT, MAX, BIN;
terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal OneDecl OneDecl;
nonterminal ConstDecl ConstDecl;
nonterminal IdentOptions IdentOptions;
nonterminal IdentList IdentList;
nonterminal VarDecl VarDecl;
nonterminal ConstIdentList ConstIdentList;
nonterminal ForEachBegin ForEachBegin;
nonterminal WhileBegin WhileBegin;
nonterminal ForEachEnd ForEachEnd;
nonterminal WhileEnd WhileEnd;
nonterminal FormParams FormParams;
nonterminal FormPar FormPar;
nonterminal Statements Statements;
nonterminal Statement Statement;
nonterminal WhileCondition WhileCondition;
nonterminal IfBegin IfBegin;
nonterminal IfCondition IfCondition;
nonterminal IfEnd IfEnd;
nonterminal IfElseBegin IfElseBegin;
nonterminal IfElseCondition IfElseCondition;
nonterminal ElseBegin ElseBegin;
nonterminal IfElseEnd IfElseEnd;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal FindAnyBegin FindAnyBegin;
nonterminal FindAndReplaceBegin FindAndReplaceBegin;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, ConstValue, ConstIdent;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr, DesignatorAddOn;
nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorNew, CondFact, CondTerm, Condition, ActParsAddOn, ActPars, OptActPars, DesignatorAddOnList;
precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

DeclList ::= (DeclarationList) DeclList:D1 OneDecl:O2 {: RESULT=new DeclarationList(D1, O2); RESULT.setLine(D1left); :}
			|
			(NoDeclarationList) {: RESULT=new NoDeclarationList(); :};
			
OneDecl ::= VarDecl:V1 {: RESULT=new OneDeclDerived1(V1); RESULT.setLine(V1left); :}
		|
		ConstDecl:C1 {: RESULT=new OneDeclDerived2(C1); RESULT.setLine(C1left); :};

VarDecl ::= (VarDecl) Type:T1 IdentList:I2 SEMI {: RESULT=new VarDecl(T1, I2); RESULT.setLine(T1left); :};

IdentOptions ::= (IdentOptionsElem) IDENT:varName {: RESULT=new IdentOptionsElem(varName); RESULT.setLine(varNameleft); :}
				|
				(IdentOptionsArray) IDENT:varName LBRACKET RBRACKET {: RESULT=new IdentOptionsArray(varName); RESULT.setLine(varNameleft); :}
				|
				(IdentOptionsMatrix) IDENT:varName LBRACKET RBRACKET LBRACKET RBRACKET {: RESULT=new IdentOptionsMatrix(varName); RESULT.setLine(varNameleft); :};
				

IdentList ::= (IdentListOneOrMore) IdentList:I1 COMMA IdentOptions:I2 {: RESULT=new IdentListOneOrMore(I1, I2); RESULT.setLine(I1left); :}
			|
			(OneIdent) IdentOptions:I1 {: RESULT=new OneIdent(I1); RESULT.setLine(I1left); :};

ConstDecl ::= (ConstDecl) CONST Type:T1 ConstIdentList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

ConstIdentList ::= (ConstIdentMoreThanOne) ConstIdentList:C1 COMMA ConstIdent:C2 {: RESULT=new ConstIdentMoreThanOne(C1, C2); RESULT.setLine(C1left); :}
				|
				(ConstIdentOne) ConstIdent:C1 {: RESULT=new ConstIdentOne(C1); RESULT.setLine(C1left); :};
				
ConstIdent ::= (ConstIdent) IDENT:constName IS ConstValue:constVal {: RESULT=new ConstIdent(constName, constVal); RESULT.setLine(constNameleft); :};

ConstValue ::= (ConstValueNumber) NUMBER:n {: RESULT=new ConstValueNumber(n); RESULT.setLine(nleft); :}
			  |
			  (ConstValueChar) CHAR:c {: RESULT=new ConstValueChar(c); RESULT.setLine(cleft); :}
			  |
			  (ConstValueBool) BOOL:b {: RESULT=new ConstValueBool(b); RESULT.setLine(bleft); :};
	
MethodDeclList ::= (MethodDeclListMany) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListMany(M1, M2); RESULT.setLine(M1left); :}
				|
				(MethodDeclListOne) MethodDecl:M1 {: RESULT=new MethodDeclListOne(M1); RESULT.setLine(M1left); :};


MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormParams:F2 RPAREN DeclList:D3 LBRACE Statements:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, D3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeNameType) Type:T1 IDENT:methodName {: RESULT=new MethodTypeNameType(T1, methodName); RESULT.setLine(T1left); :}
				|
				(MethodTypeNameVoid) VOID IDENT:methodName {: RESULT=new MethodTypeNameVoid(methodName); RESULT.setLine(methodNameleft); :};
					
FormParams ::= (FormParamsMany) FormParams:F1 COMMA FormPar:F2 {: RESULT=new FormParamsMany(F1, F2); RESULT.setLine(F1left); :}
			|
			(FormParamsOne) FormPar:F1 {: RESULT=new FormParamsOne(F1); RESULT.setLine(F1left); :}
			|
			(FormParamsNone) {: RESULT=new FormParamsNone(); :};

FormPar ::= (FormParElem) Type:T1 IDENT:par {: RESULT=new FormParElem(T1, par); RESULT.setLine(T1left); :}
		|
		(FormParArray) Type:T1 IDENT:par LBRACKET RBRACKET {: RESULT=new FormParArray(T1, par); RESULT.setLine(T1left); :}
		|
		(FormParMatrix) IDENT:par LBRACKET RBRACKET LBRACKET RBRACKET {: RESULT=new FormParMatrix(par); RESULT.setLine(parleft); :};
		
Statements ::= (StatementsMany) Statements:S1 Statement:S2 {: RESULT=new StatementsMany(S1, S2); RESULT.setLine(S1left); :}
			|
			(StatementOne) Statement:S1 {: RESULT=new StatementOne(S1); RESULT.setLine(S1left); :}
			;

Statement ::= (StatementDesignator) DesignatorStatement:D1 SEMI {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
			|
			(StatementIf) IfBegin:I1 IfCondition:I2 RPAREN Statement:S3 IfEnd:I4 {: RESULT=new StatementIf(I1, I2, S3, I4); RESULT.setLine(I1left); :}
			|
			(StatementElse) IfBegin:I1 IfCondition:I2 RPAREN Statement:S3 ElseBegin:E4 Statement:S5 IfElseEnd:I6 {: RESULT=new StatementElse(I1, I2, S3, E4, S5, I6); RESULT.setLine(I1left); :}
			|			
			(StatementWhile) WhileBegin:W1 WhileCondition:W2 RPAREN Statement:S3 WhileEnd:W4 {: RESULT=new StatementWhile(W1, W2, S3, W4); RESULT.setLine(W1left); :}
			|
			(StatementBreak) BREAK SEMI {: RESULT=new StatementBreak(); :}
			|
			(StatementContinue) CONTINUE SEMI {: RESULT=new StatementContinue(); :}			
			|
			(StatementReturnNoExpr) RETURN SEMI {: RESULT=new StatementReturnNoExpr(); :}
			|
			(StatementReturnExpr) RETURN Expr:E1 SEMI {: RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); :}
			|
			(StatementRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
			|
			(StatementPrint) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new StatementPrint(E1); RESULT.setLine(E1left); :}
			|
			(StatementPrintWithConst) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new StatementPrintWithConst(E1, N2); RESULT.setLine(E1left); :}
			|
			(StatementStatement) LBRACE Statements:S1 RBRACE {: RESULT=new StatementStatement(S1); RESULT.setLine(S1left); :}
			|
			(StatementForEach) ForEachBegin:F1 ARROW Statement:S2 RPAREN ForEachEnd:F3 SEMI {: RESULT=new StatementForEach(F1, S2, F3); RESULT.setLine(F1left); :};
			
			
			
WhileBegin ::= (WhileBegin) WHILE LPAREN {: RESULT=new WhileBegin(); :};

WhileCondition ::= (WhileCondition) Condition:C1 {: RESULT=new WhileCondition(C1); RESULT.setLine(C1left); :};

WhileEnd ::= (WhileEnd) {: RESULT=new WhileEnd(); :};

ForEachBegin ::= (ForEachBegin) Designator:D1 DOT FOREACH LPAREN Designator:D2 {: RESULT=new ForEachBegin(D1, D2); RESULT.setLine(D1left); :};

ForEachEnd ::= (ForEachEnd) {: RESULT=new ForEachEnd(); :};

IfBegin ::= (IfBegin) IF LPAREN {: RESULT=new IfBegin(); :};

IfCondition ::= (IfCondition) Condition:C1 {: RESULT=new IfCondition(C1); RESULT.setLine(C1left); :};

IfEnd ::= (IfEnd) {: RESULT=new IfEnd(); :};

IfElseBegin ::= (IfElseBegin) IF LPAREN {: RESULT=new IfElseBegin(); :};

IfElseCondition ::= (IfElseCondition) Condition:C1 {: RESULT=new IfElseCondition(C1); RESULT.setLine(C1left); :};

ElseBegin ::= (ElseBegin) ELSE {: RESULT=new ElseBegin(); :};

IfElseEnd ::= (IfElseEnd) {: RESULT=new IfElseEnd(); :};

Condition ::= (ConditionMany) CondTerm:C1 OR Condition:C2 {: RESULT=new ConditionMany(C1, C2); RESULT.setLine(C1left); :}
			|
			(ConditionOne) CondTerm:C1 {: RESULT=new ConditionOne(C1); RESULT.setLine(C1left); :};

CondTerm ::= (CondTermMany) CondFact:C1 AND CondTerm:C2 {: RESULT=new CondTermMany(C1, C2); RESULT.setLine(C1left); :}
			|
			(CondTermOne) CondFact:C1 {: RESULT=new CondTermOne(C1); RESULT.setLine(C1left); :};

CondFact ::= (CondFactOne) Expr:E1 {: RESULT=new CondFactOne(E1); RESULT.setLine(E1left); :}
		| 
		(CondFactTwo) Expr:e1 Relop:R1 Expr:e2 {: RESULT=new CondFactTwo(e1, R1, e2); RESULT.setLine(e1left); :};


DesignatorStatement ::= (DesignatorStatementIs) Designator:D1 IS Expr:E2 {: RESULT=new DesignatorStatementIs(D1, E2); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementFindAny) Designator:D1 IS Designator:D2 FindAnyBegin:F3 LPAREN Expr:E4 RPAREN {: RESULT=new DesignatorStatementFindAny(D1, D2, F3, E4); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementFindAndReplace) Designator:D1 IS Designator:D2 FindAndReplaceBegin:F3 LPAREN Expr:E4 COMMA Designator:D5 ARROW Expr:E6 RPAREN {: RESULT=new DesignatorStatementFindAndReplace(D1, D2, F3, E4, D5, E6); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementCount) Designator:D1 IS Designator:D2 DOT COUNT LPAREN Expr:E3 RPAREN {: RESULT=new DesignatorStatementCount(D1, D2, E3); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementMax) Designator:D1 IS Designator:D2 DOT MAX {: RESULT=new DesignatorStatementMax(D1, D2); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementBin) Designator:D1 IS Designator:D2 BIN {: RESULT=new DesignatorStatementBin(D1, D2); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementDecr) Designator:D1 DECR {: RESULT=new DesignatorStatementDecr(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementIncr) Designator:D1 INCR {: RESULT=new DesignatorStatementIncr(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementAct) Designator:D1 OptActPars:O2 {: RESULT=new DesignatorStatementAct(D1, O2); RESULT.setLine(D1left); :};

Designator ::= (Designator) IDENT:name DesignatorAddOnList:D1 {: RESULT=new Designator(name, D1); RESULT.setLine(nameleft); :};

DesignatorAddOnList ::= (AddOns) DesignatorAddOnList:D1 DesignatorAddOn:D2 {: RESULT=new AddOns(D1, D2); RESULT.setLine(D1left); :}
					|
					(NoAddOns) {: RESULT=new NoAddOns(); :};

DesignatorAddOn ::= (DesignatorAddOn) LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorAddOn(E1); RESULT.setLine(E1left); :}; 


FindAndReplaceBegin ::= (FindAndReplaceBegin) DOT FINDANDREPLACE {: RESULT=new FindAndReplaceBegin(); :};

FindAnyBegin ::= (FindAnyBegin) DOT FINDANY {: RESULT=new FindAnyBegin(); :};

Expr ::= (ExprMany) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprMany(E1, A2, T3); RESULT.setLine(E1left); :}
		 |
		(ExprOne) Term:T1 {: RESULT=new ExprOne(T1); RESULT.setLine(T1left); :}
		|
		(ExprOneNeg) MINUS Term:T1 {: RESULT=new ExprOneNeg(T1); RESULT.setLine(T1left); :};

Term ::= (TermMany) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMany(T1, M2, F3); RESULT.setLine(T1left); :}
		|
		(TermOne) Factor:F1 {: RESULT=new TermOne(F1); RESULT.setLine(F1left); :};

Factor ::= (FactorNumber) NUMBER:n {: RESULT=new FactorNumber(n); RESULT.setLine(nleft); :}		
		|
		(FactorChar) CHAR:c {: RESULT=new FactorChar(c); RESULT.setLine(cleft); :}
		|
		(FactorBool) BOOL:b {: RESULT=new FactorBool(b); RESULT.setLine(bleft); :}
		|
		(FactorParen) LPAREN Expr:E1 RPAREN {: RESULT=new FactorParen(E1); RESULT.setLine(E1left); :}
		|
		(FactorDesActPar) Designator:D1 OptActPars:O2 {: RESULT=new FactorDesActPar(D1, O2); RESULT.setLine(D1left); :}
		|
		(FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
		|
		(FactorNewExpr) NEW Type:T1 FactorNew:F2 {: RESULT=new FactorNewExpr(T1, F2); RESULT.setLine(T1left); :};
		
FactorNew ::= (FactorNew) LBRACKET Expr:E1 RBRACKET {: RESULT=new FactorNew(E1); RESULT.setLine(E1left); :};
			
OptActPars ::= (OptActPars) LPAREN ActPars:A1 RPAREN {: RESULT=new OptActPars(A1); RESULT.setLine(A1left); :};
			
ActPars ::= (ActParsHas) Expr:E1 ActParsAddOn:A2 {: RESULT=new ActParsHas(E1, A2); RESULT.setLine(E1left); :}
			|
			(ActParsNone) {: RESULT=new ActParsNone(); :};

ActParsAddOn ::= (ActParsAddOnMany) ActParsAddOn:A1 COMMA Expr:E2 {: RESULT=new ActParsAddOnMany(A1, E2); RESULT.setLine(A1left); :}
			|
			(ActParsAddOnNone) {: RESULT=new ActParsAddOnNone(); :};

Relop ::= (RelopE) EQUAL {: RESULT=new RelopE(); :}
		|
		(RelopNE) NOTEQUAL {: RESULT=new RelopNE(); :}
		|
		(RelopGRT) GRT {: RESULT=new RelopGRT(); :}
		|
		(RelopGRTE) GRTE {: RESULT=new RelopGRTE(); :}
		|
		(RelopLT) LT {: RESULT=new RelopLT(); :}
		|
		(RelopLTE) LTE {: RESULT=new RelopLTE(); :};
		
				
Addop ::= (AddopP) PLUS {: RESULT=new AddopP(); :}
		|
		(AddopM) MINUS {: RESULT=new AddopM(); :};

Mulop ::= (MulopM) MUL {: RESULT=new MulopM(); :}
		|
		(MulopD) DIV {: RESULT=new MulopD(); :}
		|
		(MulopP) PERCENT {: RESULT=new MulopP(); :};
